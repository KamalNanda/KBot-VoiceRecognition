{"version":3,"sources":["button.js","messageBox.js","App.js","index.js"],"names":["Button","className","id","onClick","this","props","onButtonClick","React","Component","messageBox","text","App","useState","name","setName","Utext","setUserText","Btext","setBotText","recognition","window","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","answer","ans","setTimeout","msg","SpeechSynthesisUtterance","speechSynthesis","speak","lang","interimResults","maxAlternatives","onresult","event","results","transcript","includes","url","command","split","shift","query","join","newQuery","replace","open","result","nameIndex","indexOf","getName","onspeechend","stop","console","log","start","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQACqBA,E,uKAEnB,OAAO,yBAAKC,UAAW,aAAY,4BAAQC,GAAG,MAAMC,QAASC,KAAKC,MAAMC,eAArC,c,GAFDC,IAAMC,WCArBC,E,uKAEnB,OACC,yBAAKR,UAAS,cAASG,KAAKC,MAAMJ,YAAcG,KAAKC,MAAMK,U,GAHtBH,IAAMC,WCiF/BG,MA7Eb,WAAe,IAAD,EACYC,mBAAS,IADrB,mBACLC,EADK,KACCC,EADD,OAEkBF,mBAAS,IAF3B,mBAELG,EAFK,KAEGC,EAFH,OAGiBJ,mBAAS,IAH1B,mBAGLK,EAHK,KAGGC,EAHH,KAKNC,EAAc,IAAKC,OAAOC,mBAAqBD,OAAOE,yBAA2BF,OAAOG,sBAAwBH,OAAOI,qBAoD7H,SAASC,EAAOC,GACdC,YAAW,kBAAKT,EAAWQ,KAAO,KAClCC,YAAW,WACT,IAAIC,EAAM,IAAIC,yBAAyBH,GACzCN,OAAOU,gBAAgBC,MAAMH,KAC1B,MAML,OA9DAT,EAAYa,KAAO,QACpBb,EAAYc,gBAAiB,EAC7Bd,EAAYe,gBAAkB,EAU9Bf,EAAYgB,SAAW,SAACC,GAGrB,GADApB,EAAaoB,EAAMC,QAAQ,GAAG,GAAGC,YAC9BF,EAAMC,QAAQ,GAAG,GAAGC,WAAWC,SAAS,SAAUd,EAAO,aACvD,GAAGW,EAAMC,QAAQ,GAAG,GAAGC,WAAWC,SAAS,eAAgBd,EAAO,gBAClE,GAAGW,EAAMC,QAAQ,GAAG,GAAGC,WAAWC,SAAS,YAAad,EAAO,8CAC/D,GAAGW,EAAMC,QAAQ,GAAG,GAAGC,WAAWC,SAAS,qBAAsBd,EAAO,2EACxE,GAAGW,EAAMC,QAAQ,GAAG,GAAGC,WAAWC,SAAS,UAAW,CAEvD,IAAIC,EADNf,EAAO,kBAEL,IAAIgB,EAAUL,EAAMC,QAAQ,GAAG,GAAGC,WAAWI,MAAM,KACnDD,EAAQE,QACR,IAAIC,EAAQH,EAAQI,KAAK,KACzB,GAAGT,EAAMC,QAAQ,GAAG,GAAGC,WAAWC,SAAS,WAAW,CACrD,IAAIO,EAAWF,EAAMG,QAAQ,cAAc,IACzCP,EAAG,uDAAmDM,QAGtDN,GADKJ,EAAMC,QAAQ,GAAG,GAAGC,WAAWC,SAAS,UAC1C,0CAAsCK,IAG5CxB,OAAO4B,KAAKR,EAAM,eAEjB,GAAGJ,EAAMC,QAAQ,GAAG,GAAGC,WAAWC,SAAS,mBAAmB,CAC/D,GAAY,KAAT1B,EACDY,EAAO,kEAIPA,EADYZ,QAIb,GAAGuB,EAAMC,QAAQ,GAAG,GAAGC,WAAWC,SAAS,cAAc,CAC5D,IAAI1B,EAtCV,SAAiBoC,GACf,IAAIR,EAAUQ,EAAOP,MAAM,KACvBQ,EAAYT,EAAQU,QAAQ,MAAQ,EACxC,OAAOV,EAAQS,GAmCAE,CAAQhB,EAAMC,QAAQ,GAAG,GAAGC,YACvCxB,EAAQD,GACRY,EAAO,QAAUZ,EAAO,mBAErBY,EAAO,YAAcW,EAAMC,QAAQ,GAAG,GAAGC,aAShDnB,EAAYkC,YAAc,WACxBlC,EAAYmC,OACZC,QAAQC,IAAI,YAGZ,yBAAKvD,UAAU,OACb,kBAAC,EAAD,CAAQK,cA7DZ,WACIa,EAAYsC,QACZF,QAAQC,IAAI,wCA4DZ,kBAAC,EAAD,CAAY9C,KAAQK,EAAOd,UAAU,YACrC,kBAAC,EAAD,CAAYS,KAAQO,EAAOhB,UAAU,cCxE7CyD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.bea729bb.chunk.js","sourcesContent":["import React from 'react'\r\nexport default class Button extends React.Component{\r\n\trender(){\r\n\t\treturn <div className =\"btnHolder\"><button id=\"btn\" onClick={this.props.onButtonClick}>SPEAK</button></div>\r\n\t}\r\n}","import React from 'react'\r\nexport default class messageBox extends React.Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className={`box ${this.props.className}`}>{this.props.text}</div>\r\n\t\t)\r\n\t}\r\n}","import React , {useState} from 'react';\nimport './App.css';\nimport Button from './button'\nimport MessageBox from './messageBox'\n\n  function App(){\n    const [name, setName] = useState(\"\")\n    const [Utext , setUserText] = useState(\"\")\n    const [Btext , setBotText] = useState(\"\")\n  \n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition)()\n    recognition.lang = 'en-US';\n   recognition.interimResults = false;\n   recognition.maxAlternatives = 5;\n    function onButtonClick() {\n        recognition.start();\n        console.log('Ready to receive a color command.');\n      }\n  function getName(result) {\n    var command = result.split(\" \")\n    var nameIndex = command.indexOf(\"is\") + 1\n    return command[nameIndex]\n  }\n   recognition.onresult = (event) => {\n      \n      setUserText( event.results[0][0].transcript)\n      if(event.results[0][0].transcript.includes(\"hello\")) answer(\"Hiii\")\n      else if(event.results[0][0].transcript.includes(\"how are you\")) answer(\"Fine :)\")\n      else if(event.results[0][0].transcript.includes(\"f*** you\")) answer(\"Nope, with all due respects, FUCK YOU\")\n      else if(event.results[0][0].transcript.includes(\"what is your name\")) answer(\"My name is KBot! I am a voice chat bot developed by Kamal Nanda Ji\")\n      else if(event.results[0][0].transcript.includes(\"search\" )){\n        answer(\"Searching.....\")\n          var url\n          var command = event.results[0][0].transcript.split(\" \")\n          command.shift()\n          var query = command.join(\"+\")\n          if(event.results[0][0].transcript.includes(\"YouTube\")){\n           let newQuery = query.replace(\"+on+YouTube\",\"\")\n             url = `https://www.youtube.com/results?search_query=${newQuery}`\n          }\n          else if(event.results[0][0].transcript.includes(\"Google\")){\n             url = `https://www.google.com/search?q=${query}`\n          }\n          else url = `https://www.google.com/search?q=${query}`\n          window.open(url , \"_blank\")\n      }\n      else if(event.results[0][0].transcript.includes(\"what is my name\")){\n          if(name === \"\"){\n            answer(\"I didn't get your name earlier, tell me now and try again\")\n          }\n          else {\n            var uname = name\n            answer(uname)\n          }\n      }\n      else if(event.results[0][0].transcript.includes(\"my name is\")){ \n        let name = getName(event.results[0][0].transcript)\n        setName(name)\n        answer(\"Hiii \" + name + \" I am KBot\")\n      }\n      else answer(\"You said \" + event.results[0][0].transcript) \n    };\n    function answer(ans){\n      setTimeout(()=> setBotText(ans) , 1000)\n      setTimeout(()=> {\n        var msg = new SpeechSynthesisUtterance(ans);\n      window.speechSynthesis.speak(msg);\n      }, 1500)\n    }\n    recognition.onspeechend = function() {\n      recognition.stop();\n      console.log(\"STOPPED\")\n    }\n    return (\n      <div className=\"App\">\n        <Button onButtonClick={onButtonClick} />\n        <MessageBox text = {Utext} className=\"userBox\"/>\n        <MessageBox text = {Btext} className=\"botName\"/>\n      </div> \n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}